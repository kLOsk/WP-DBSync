#!/bin/bash

# Dynamically find CONFIG_FILE
config_files=(Movefile.yaml movefile.yaml Movefile movefile movefile.yml Movefile.yaml)

matches=()

for file in "${config_files[@]}"; do
  if [[ -f "$file" ]]; then
    matches+=("$file")
  fi
done

if [ ${#matches[@]} -eq 0 ]; then
  echo "Error: No Movefile found (Movefile.yaml, movefile.yaml, Movefile, movefile, movefile.yml, Movefile.yaml)."
  exit 1
elif [ ${#matches[@]} -gt 1 ]; then
  echo "Error: Multiple Movefiles found: ${matches[@]}"
  exit 1
fi

CONFIG_FILE="${matches[0]}"

# Check if yq is installed
if ! command -v yq &> /dev/null; then
  echo "yq is not installed. Install it using 'brew install yq' or visit https://github.com/mikefarah/yq"
  exit 1
fi

# Function to check if environment exists in the Movefile
check_environment() {
  env_name=$1
  if [[ "$env_name" == "local" ]]; then
    echo "Error: 'local' is not a valid environment name."
    exit 1
  fi

  if ! yq e ".${env_name}" $CONFIG_FILE &> /dev/null; then
    echo "Error: Environment '$env_name' not found in $CONFIG_FILE."
    exit 1
  fi
}

# Function to pull database from remote to local
pull_db() {
  remote_env=$1

  # Load local settings from the YAML file
  local_wp_path=$(yq e ".local.wordpress_path" $CONFIG_FILE)

  # Load remote settings from the YAML file
  remote_db_name=$(yq e ".${remote_env}.database.name" $CONFIG_FILE)
  remote_db_user=$(yq e ".${remote_env}.database.user" $CONFIG_FILE)
  remote_db_password=$(yq e ".${remote_env}.database.password" $CONFIG_FILE)
  remote_db_host=$(yq e ".${remote_env}.database.host" $CONFIG_FILE)
  remote_ssh_user=$(yq e ".${remote_env}.ssh.user" $CONFIG_FILE)
  remote_ssh_host=$(yq e ".${remote_env}.ssh.host" $CONFIG_FILE)
  remote_wp_path=$(yq e ".${remote_env}.wordpress_path" $CONFIG_FILE)

  # Export the remote database and transfer it to the local machine
  echo "Exporting database from $remote_env environment..."
  ssh $remote_ssh_user@$remote_ssh_host "wp db export $remote_wp_path/remote-dump.sql --path=$remote_wp_path"
  scp $remote_ssh_user@$remote_ssh_host:$remote_wp_path/remote-dump.sql ./local-dump.sql

  # Import the remote database into the local environment
  echo "Importing database into local environment..."
  wp db import ./local-dump.sql --path=$local_wp_path

  # Optionally run a search-replace to update URLs
  remote_url=$(yq e ".${remote_env}.vhost" $CONFIG_FILE)
  local_url=$(yq e ".local.vhost" $CONFIG_FILE)
  wp search-replace "$remote_url" "$local_url" --path=$local_wp_path

  echo "Database pull from $remote_env to local completed."
}

# Function to push database from local to remote
push_db() {
  remote_env=$1

  # Load local settings from the YAML file
  local_wp_path=$(yq e ".local.wordpress_path" $CONFIG_FILE)

  # Load remote settings from the YAML file
  remote_db_name=$(yq e ".${remote_env}.database.name" $CONFIG_FILE)
  remote_db_user=$(yq e ".${remote_env}.database.user" $CONFIG_FILE)
  remote_db_password=$(yq e ".${remote_env}.database.password" $CONFIG_FILE)
  remote_db_host=$(yq e ".${remote_env}.database.host" $CONFIG_FILE)
  remote_ssh_user=$(yq e ".${remote_env}.ssh.user" $CONFIG_FILE)
  remote_ssh_host=$(yq e ".${remote_env}.ssh.host" $CONFIG_FILE)
  remote_wp_path=$(yq e ".${remote_env}.wordpress_path" $CONFIG_FILE)

  # Export the local database
  echo "Exporting local database..."
  wp db export ./local-dump.sql --path=$local_wp_path

  # Transfer the local database to the remote environment
  echo "Transferring database to $remote_env environment..."
  scp ./local-dump.sql $remote_ssh_user@$remote_ssh_host:$remote_wp_path/remote-dump.sql

  # Import the database into the remote environment
  echo "Importing database into remote environment..."
  ssh $remote_ssh_user@$remote_ssh_host "wp db import $remote_wp_path/remote-dump.sql --path=$remote_wp_path"

  # Optionally run a search-replace to update URLs
  local_url=$(yq e ".local.vhost" $CONFIG_FILE)
  remote_url=$(yq e ".${remote_env}.vhost" $CONFIG_FILE)
  ssh $remote_ssh_user@$remote_ssh_host "wp search-replace '$local_url' '$remote_url' --path=$remote_wp_path"

  echo "Database push from local to $remote_env completed."
}

# Function to determine push/pull and environment
sync_db() {
  action=$1
  environment=$2

  check_environment $environment

  if [[ "$action" == "pull" ]]; then
    pull_db $environment
  elif [[ "$action" == "push" ]]; then
    push_db $environment
  else
    echo "Invalid action: $action. Use 'pull' or 'push'."
    exit 1
  fi
}

# Check if enough arguments were provided
if [ $# -lt 2 ]; then
  echo "Usage: $0 {push|pull} {environment_name}"
  exit 1
fi

# Call the sync function with provided arguments
sync_db $1 $2

